import { Typography, List, ConfigProvider } from 'antd'

const { Title, Paragraph } = Typography;

const VDOMReact = () => {
    return (
        <ConfigProvider
            theme={{
                components: {
                    Typography: {
                        fontSize: 18,
                        colorText: '#0e101c'
                    }
                }
            }}
        >
            <Title className='title'>Virtual DOM</Title>
            <Paragraph>
                VDOM – это промежуточное представление реального DOM в памяти компьютера. React создает виртуальное дерево элементов (набор HTML-тегов), которое в точности соответствует реальному состоянию компонентов реального DOM. Затем сравнивает их и, вместо того, чтобы изменять каждый элемент в реальном DOM, React обновляет вирутальный DOM, а затем при накоплении минимального количества изменений, изменяет реальный DOM.
                То есть VDOM нужен для того, чтобы оптимизировать изменения в реальном DOM и сделать программирование еще более удобным (не нужно беспокоиться о том, как будет обновляться реальный DOM и как компоненты будут отображаться в разных браузерах, React сам об этом позаботится).
            </Paragraph>
            <Paragraph>
                Reconciliation – это процесс, при котором React сравнивает предыдущее состояние компонентов с их новым состоянием и определяет, какие изменения нужно внести в UI.
            </Paragraph>
            <List
                header={<Title level={3}>Состоит из следующих процессов:</Title>}
            >
                <List.Item>
                    <Paragraph>
                        1. При первом рендере компонентов создается виртуальное дерево на основе JSX-разметки, создаются элементы разметки (теги) и устанавливается первоначальное состояние компонентов
                    </Paragraph>
                </List.Item>
                <List.Item>
                    <Paragraph>
                        2.	React обновляет реальный DOM, отображая созданный виртуальный DOM на экране
                    </Paragraph>
                </List.Item>
                <List.Item>
                    <Paragraph>
                        3.	После изменения состояния каких бы то ни было компонентов, React запускает процесс reconciliation и сравнивает предыдущий и новый виртуальный DOM
                    </Paragraph>
                </List.Item>
                <List.Item>
                    <Paragraph>
                        4.	Сравниваются элементы дерева до изменений и после, далее React определяет, что нужно изменить/удалить, а что трогать не нужно
                    </Paragraph>
                </List.Item>
                <List.Item>
                    <Paragraph>
                        5.	Вместо перерисовывания всего интерфейса, React применяет только необходимые изменения в реальном DOM
                    </Paragraph>
                </List.Item>
            </List>
        </ConfigProvider>
    )
}

export default VDOMReact;